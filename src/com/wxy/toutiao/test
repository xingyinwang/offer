3
3 1 2 3 --- 1
3 2 4 6 --- 2
3 3 4 6 --- 3


public static void main(String[] args){
        int[] arr = new int[]{1,2,3,4,5,6,7,8,9};
        TreeNode head = new BuildTree().createTree(arr);
        int res = getAncestot(head, 6, 7);
        System.out.println(res);
    }
    public static int getAncestot(TreeNode head, int o1, int o2) {

        //建哈希表
        HashMap<Integer, Integer> hashMap = new HashMap<>();
        hashMap.put(head.val, null);
        buildTable(head, hashMap);
        int node = query(hashMap, o1, o2);
        return node;
    }

    private static int query(HashMap<Integer, Integer> hashMap, Integer o1, Integer o2) {
        HashSet<Integer> set = new HashSet<>();
        set.add(o1);
        while (hashMap.containsKey(o1)) {
            set.add(hashMap.get(o1));
            o1 = hashMap.get(o1);
        }
        while (!set.contains(o2)){
            o2 = hashMap.get(o2);
        }
        return o2;
    }

    private static void buildTable(TreeNode head, HashMap<Integer, Integer> hashMap) {
        if (head == null)
            return;
        if (head.left != null) {
            hashMap.put(head.left.val, head.val);
        }
        if (head.right != null)
            hashMap.put(head.right.val, head.val);
        buildTable(head.left, hashMap);
        buildTable(head.right, hashMap);
    }